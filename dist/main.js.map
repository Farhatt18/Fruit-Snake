{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js-project/./src/scripts/snake.js","webpack://js-project/./src/scripts/fruits.js","webpack://js-project/./src/scripts/game.js","webpack://js-project/./src/index.js"],"sourcesContent":["class Snake {\n  constructor(ctx, tileSize, grid) {\n    this.ctx = ctx;\n    this.tileSize = tileSize;\n    this.grid = grid;\n    this.pos = [{ x: 10, y: 10 }];\n  }\n\n  get head() {\n    return this.pos[0];\n  }\n\n  drawSnake() {\n    this.ctx.fillStyle = \"green\";\n    this.pos.forEach((spot) => {\n      this.ctx.fillRect(\n        spot.x * this.tileSize,\n        spot.y * this.tileSize,\n        this.grid,\n        this.grid\n      );\n    });\n  }\n  move(direction, grid) {\n    const head = { ...this.head };\n    // this.pos.unshift(head);\n\n    // Update head based on direction\n    switch (direction) {\n      case \"up\":\n        head.y = (head.y - 1 + grid) % grid;\n        break;\n      case \"down\":\n        head.y = (head.y + 1) % grid;\n        break;\n      case \"left\":\n        head.x = (head.x - 1 + grid) % grid;\n        break;\n      case \"right\":\n        head.x = (head.x + 1) % grid;\n        break;\n    }\n    this.pos.unshift(head);\n    this.pos.pop();\n  }\n\n  grow() {\n    const tail = { ...this.pos[this.pos.length - 1] };\n    this.pos.push(tail);\n  }\n}\n\nexport default Snake;\n","// fruit.js\nclass Fruit {\n  constructor(ctx, grid, snake, type) {\n    this.grid = grid;\n    this.ctx = ctx;\n    this.snake = snake;\n    this.type = type;\n    this.position = this.getRandomFruitPosition();\n    // this.color = this.type === \"good\" ? \"yellow\" : \"red\";\n  }\n  drawFruit() {\n    this.ctx.fillStyle = this.type === \"good\" ? \"yellow\" : \"red\";\n    this.ctx.fillRect(\n      this.position.x * this.grid,\n      this.position.y * this.grid,\n      this.grid,\n      this.grid\n    );\n  }\n\n  getRandomFruitPosition() {\n    let newPosition;\n    do {\n      newPosition = {\n        x: Math.floor(Math.random() * this.grid),\n        y: Math.floor(Math.random() * this.grid),\n      };\n    } while (this.isPositionOccupied(newPosition));\n    return newPosition;\n  }\n\n  isPositionOccupied(newPosition) {\n    return this.snake.pos.some(\n      (spot) => spot.x === newPosition.x && spot.y === newPosition.y\n    );\n  }\n}\n\nexport default Fruit;\n","import Snake from \"./snake.js\";\nimport Fruit from \"./fruits.js\";\n\nclass Game {\n  constructor(screen) {\n    this.screen = screen;\n    this.ctx = screen.getContext(\"2d\");\n    this.direction = \"right\";\n    this.score = 0;\n    this.level = 1;\n    this.tileSize = 24;\n    this.grid = screen.width / this.tileSize;\n    this.snake = new Snake(this.ctx, this.tileSize, this.grid);\n    this.goodFruit = new Fruit(this.ctx, this.grid, this.snake, \"good\");\n    this.badFruit = new Fruit(this.ctx, this.grid, this.snake, \"bad\");\n    this.isPaused = false;\n\n    this.lastTimestamp = 0;\n    this.frameInterval = 200;\n\n    this.mainSound = new Audio(\"./assets/sounds/music.mp3\");\n    this.mainSound.volume = 0.5;\n    this.mainSound.loop = true;\n\n    this.isMuted = false;\n\n    this.buttonSound = new Audio(\"./assets/sounds/click.mp3\");\n    this.buttonSound.volume = 0.2;\n    this.buttonSound.loop = false;\n\n    this.eatenSound = new Audio(\"./assets/sounds/eating.mp3\");\n    this.eatenSound.volume = 0.2;\n    this.eatenSound.loop = false;\n\n    this.hitSound = new Audio(\"./assets/sounds/pow.mp3\");\n    this.hitSound.volume = 0.2;\n    this.hitSound.loop = false;\n\n    const muteBtn = document.getElementById(\"mute\");\n    const updateMuteBtn = () => {\n      muteBtn.src = this.mainSound.muted\n        ? \"./assets/mute.png\"\n        : \"./assets/unmute.png\";\n    };\n    muteBtn.addEventListener(\"click\", () => {\n      this.muteToggle();\n      updateMuteBtn();\n    });\n\n    updateMuteBtn();\n  }\n\n  togglePause() {\n    this.isPaused = !this.isPaused;\n  }\n\n  muteToggle() {\n    this.isMuted = !this.isMuted;\n\n    this.mainSound.muted = this.isMuted;\n    this.buttonSound.muted = this.isMuted;\n    this.eatenSound.muted = this.isMuted;\n    this.hitSound.muted = this.isMuted;\n  }\n\n  isEatingFruit() {\n    const head = this.snake.pos[0];\n    const fruit =\n      this.goodFruit.type === \"good\" ? this.goodFruit : this.badFruit;\n    return (\n      Math.floor(head.x) === Math.floor(fruit.position.x) &&\n      Math.floor(head.y) === Math.floor(fruit.position.y)\n    );\n  }\n\n  // isEatingFruit() {\n  //   const head = this.snake.head;\n  //   const fruit =\n  //     this.goodFruit.type === \"good\" ? this.goodFruit : this.badFruit;\n\n  //   // Introduce a tolerance for collision detection\n  //   const tolerance = 0.1;\n\n  //   return (\n  //     Math.abs(head.x - fruit.position.x) < tolerance &&\n  //     Math.abs(head.y - fruit.position.y) < tolerance\n  //   );\n  // }\n\n  move(timestamp) {\n    if (this.isPaused) return;\n    const elapsed = timestamp - this.lastTimestamp;\n\n    if (elapsed >= this.frameInterval) {\n      this.lastTimestamp = timestamp;\n\n      this.snake.move(this.direction, this.grid + 1);\n      if (this.isCollision() || this.isOutOfBounds() || this.checkCollision()) {\n        this.hitSound.play();\n        this.endGame();\n        return;\n      }\n\n      if (this.isEatingFruit()) {\n        this.snake.grow();\n        this.score++;\n        if (this.score % 5 === 0) {\n          this.level++;\n          this.frameInterval = 150;\n          if (this.score === 10) {\n            this.frameInterval = 100;\n          }\n        }\n        this.goodFruit.position = this.goodFruit.getRandomFruitPosition();\n        this.badFruit.position = this.badFruit.getRandomFruitPosition();\n        this.eatenSound.play();\n      }\n    }\n  }\n\n  isCollision() {\n    const head = this.snake.head;\n    return this.snake.pos\n      .slice(1)\n      .some((spot) => spot.x === head.x && spot.y === head.y);\n  }\n\n  isOutOfBounds() {\n    const head = this.snake.head;\n    if (\n      head.x < 0 ||\n      head.x >= this.grid ||\n      head.y < 0 ||\n      head.y >= this.grid\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  checkCollision() {\n    const head = this.snake.head;\n    const fruitHead = this.badFruit.position;\n    return (\n      Math.floor(head.x) === Math.floor(fruitHead.x) &&\n      Math.floor(head.y) === Math.floor(fruitHead.y)\n    );\n  }\n\n  draw() {\n    this.ctx.clearRect(0, 0, this.screen.width, this.screen.height);\n    this.snake.drawSnake();\n    this.goodFruit.drawFruit();\n    this.badFruit.drawFruit();\n    this.drawScore();\n  }\n\n  drawScore() {\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"20px Arial\";\n    this.ctx.fillText(`Score: ${this.score} | Level: ${this.level}`, 10, 20);\n  }\n\n  endGame() {\n    // alert(`Game over! Your score: ${this.score}, Your level: ${this.level}`);\n    this.togglePause();\n    const modal = document.getElementById(\"game-over-modal\");\n    const scoreDisplay = document.getElementById(\"score-display\");\n    const levelDisplay = document.getElementById(\"level-display\");\n    const highScoreDisplay = document.getElementById(\"high-score-display\");\n\n    let highScore = localStorage.getItem(\"highScore\") || 0;\n\n    if (this.score > highScore) {\n      highScore = this.score;\n      // Update the high score in localStorage\n      localStorage.setItem(\"highScore\", highScore);\n    }\n\n    scoreDisplay.textContent = `Your Score: ${this.score}`;\n    levelDisplay.textContent = `Your Level: ${this.level}`;\n    highScoreDisplay.textContent = `High Score: ${highScore}`;\n\n    setTimeout(() => {\n      modal.style.display = \"flex\";\n    }, 0);\n\n    // modal.style.display = \"flex\";\n\n    const restartBtn = document.getElementById(\"restart-btn\");\n\n    restartBtn.addEventListener(\"click\", () => {\n      this.buttonSound.play();\n      modal.style.display = \"none\";\n      this.togglePause();\n      this.resetGame();\n      this.startGame();\n    });\n  }\n\n  resetGame() {\n    this.level = 1;\n    this.score = 0;\n    this.direction = \"right\";\n    this.goodFruit = new Fruit(this.ctx, this.grid, this.snake, \"good\");\n    this.badFruit = new Fruit(this.ctx, this.grid, this.snake, \"bad\");\n    this.snake = new Snake(this.ctx, this.tileSize, this.grid);\n    this.isPaused = false;\n  }\n\n  handleKeyPress(event) {\n    switch (event.key) {\n      case \"ArrowUp\":\n        if (this.direction !== \"down\") {\n          this.direction = \"up\";\n        }\n        break;\n      case \"ArrowDown\":\n        if (this.direction !== \"up\") {\n          this.direction = \"down\";\n        }\n        break;\n      case \"ArrowLeft\":\n        if (this.direction !== \"right\") {\n          this.direction = \"left\";\n        }\n        break;\n      case \"ArrowRight\":\n        if (this.direction !== \"left\") {\n          this.direction = \"right\";\n        }\n        break;\n    }\n  }\n\n  updateGoodFruitPosition() {\n    // Generate a new position for the \"good\" fruit\n    this.goodFruit.position = this.goodFruit.getRandomFruitPosition();\n  }\n\n  // updateGoodFruitPosition() {\n  //   let newPosition;\n  //   do {\n  //     newPosition = this.goodFruit.getRandomFruitPosition();\n  //   } while (\n  //     this.snake.pos.some(\n  //       (spot) =>\n  //         Math.floor(spot.x) === Math.floor(newPosition.x) &&\n  //         Math.floor(spot.y) === Math.floor(newPosition.y)\n  //     ) ||\n  //     (Math.floor(this.badFruit.position.x) === Math.floor(newPosition.x) &&\n  //       Math.floor(this.badFruit.position.y) === Math.floor(newPosition.y))\n  //   );\n\n  //   this.goodFruit.position = newPosition;\n  // }\n\n  gameLoop(timestamp) {\n    this.move(timestamp);\n    this.draw();\n    if (this.score % 5 === 0 && this.score !== 0 && this.score % 100 === 0) {\n      this.updateGoodFruitPosition();\n    }\n    if (!this.isPaused) {\n      requestAnimationFrame(this.gameLoop.bind(this));\n    }\n  }\n\n  startGame() {\n    const highScore = localStorage.getItem(\"highScore\") || 0;\n    const highScoreDisplay = document.getElementById(\"high-score-display\");\n    highScoreDisplay.textContent = `High Score: ${highScore}`;\n    this.mainSound.play();\n\n    document.addEventListener(\"keydown\", this.handleKeyPress.bind(this));\n    requestAnimationFrame(this.gameLoop.bind(this));\n  }\n}\n\nexport default Game;\n","// import Example from \"./scripts/example\";\nimport Game from \"./scripts/game.js\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const modal = document.getElementById(\"instruction-modal\");\n  modal.style.display = \"flex\";\n  const screen = document.getElementById(\"snakeCanvas\");\n  const game = new Game(screen);\n  const startGameBtn = document.getElementById(\"start-game--btn\");\n\n  startGameBtn.addEventListener(\"click\", function () {\n    game.buttonSound.play();\n    modal.style.display = \"none\"; // Hide the instruction modal\n    screen.style.display = \"block\"; // Show the game screen\n    game.startGame(); // Start the game\n  });\n});\n"],"names":["constructor","ctx","tileSize","grid","this","pos","x","y","head","drawSnake","fillStyle","forEach","spot","fillRect","move","direction","unshift","pop","grow","tail","length","push","snake","type","position","getRandomFruitPosition","drawFruit","newPosition","Math","floor","random","isPositionOccupied","some","screen","getContext","score","level","width","Snake","goodFruit","Fruit","badFruit","isPaused","lastTimestamp","frameInterval","mainSound","Audio","volume","loop","isMuted","buttonSound","eatenSound","hitSound","muteBtn","document","getElementById","updateMuteBtn","src","muted","addEventListener","muteToggle","togglePause","isEatingFruit","fruit","timestamp","isCollision","isOutOfBounds","checkCollision","play","endGame","slice","fruitHead","draw","clearRect","height","drawScore","font","fillText","modal","scoreDisplay","levelDisplay","highScoreDisplay","highScore","localStorage","getItem","setItem","textContent","setTimeout","style","display","resetGame","startGame","handleKeyPress","event","key","updateGoodFruitPosition","gameLoop","requestAnimationFrame","bind","game","Game"],"sourceRoot":""}